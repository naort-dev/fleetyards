<%
chunks = Webpacker.manifest.lookup_pack_with_chunks!('frontend', type: :javascript).flatten.uniq

pack_images = [
  'bg-0.jpg',
  'bg-2.jpg',
  'bg-5.jpg',
  'bg-6.jpg',
  'bg-7.jpg',
  'bg-8.jpg',
  'bg-404.jpg',
  'community-logo.png',
  'logo.png',
  'favicon.png',
  'store_image.jpg',
  'bountyhunting.png',
  'engineering.png',
  'exploration.png',
  'freelancing.png',
  'infiltration.png',
  'piracy.png',
  'resources.png',
  'scouting.png',
  'security.png',
  'smuggling.png',
  'social.png',
  'trade.png',
  'transport.png',
  'loading.gif',
  'default-skin.png',
  'default-skin.svg',
  'add.gif',
  'edit.gif',
  'fleetchart.gif',
  'groups.gif',
  'public.gif',
  'computers.svg',
  'coolers.svg',
  'fuel_intakes.svg',
  'fuel_tanks.svg',
  'jump_modules.svg',
  'main_thrusters.svg',
  'maneuvering_thrusters.svg',
  'missiles.svg',
  'power_plants.svg',
  'quantum_drives.svg',
  'quantum_fuel_tanks.svg',
  'radar.svg',
  'shield_generators.svg',
  'turrets.svg',
  'utility_items.svg',
  'weapons.svg'
]

asset_images = [
  'favicon.png',
  'icon-48.png',
  'icon-96.png',
  'icon-128.png',
  'icon-192.png',
  'icon-196.png',
  'icon-256.png',
  'icon-384.png',
  'icon-512.png',
  'logo.png',
  'icon-ipad-retina.png',
  'icon-ipad.png',
  'icon-iphone-retina.png',
  'icon-iphone.png'
]
%>
var CACHE_VERSION = 'v1.2'; // update due to missing csp header entry
var CACHE_NAME = CACHE_VERSION + ':sw-cache-';

function onInstall(event) {
  // console.log('[Serviceworker]', "Installing!", event);
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
      return cache.addAll([
        '/',
        '<%= asset_path(Webpacker.manifest.lookup!("frontend.css")) %>',
        '<%= asset_path(Webpacker.manifest.lookup!("frontend.js")) %>',
        <% chunks.each do |chunk| %>'<%= asset_path(chunk) %>',<% end %>
        <% pack_images.each do |image| %>'<%= asset_path(Webpacker.manifest.lookup!("media/#{image}")) %>',<% end %>
        <% asset_images.each do |image| %>'<%= asset_path image %>',<% end %>
      ]);
    })
  );
}

function onActivate(event) {
  // console.log('[Serviceworker]', "Activating!", event);
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.filter(function(cacheName) {
          // Return true if you want to remove this cache,
          // but remember that caches are shared across
          // the whole origin
          return cacheName.indexOf(CACHE_VERSION) !== 0;
        }).map(function(cacheName) {
          return caches.delete(cacheName);
        })
      );
    })
  );
}

// Borrowed from https://github.com/TalAter/UpUp
function onFetch(event) {
  event.respondWith(
    // try to return untouched request from network first
    fetch(event.request).catch(function() {
      // if it fails, try to return request from the cache
      return caches.match(event.request).then(function(response) {
        if (response) {
          return response;
        }
        // if not found in cache, return default offline content for navigate requests
        if (event.request.mode === 'navigate' ||
          (event.request.method === 'GET' && event.request.headers.get('accept').includes('text/html'))) {
          // console.log('[Serviceworker]', "Fetching offline content", event);
          return caches.match('/offline.html');
        }
      })
    })
  );
}

self.addEventListener('install', onInstall);
self.addEventListener('activate', onActivate);
self.addEventListener('fetch', onFetch);
